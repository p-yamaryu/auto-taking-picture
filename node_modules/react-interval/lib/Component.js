"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactInterval = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ReactInterval = /*#__PURE__*/function (_React$Component) {
  _inherits(ReactInterval, _React$Component);

  var _super = _createSuper(ReactInterval);

  function ReactInterval() {
    var _this;

    _classCallCheck(this, ReactInterval);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callback", function () {
      if (_this.timer) {
        var callback = _this.props.callback;
        callback();

        _this.start();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "start", function () {
      _this.stop();

      var timeout = _this.props.timeout;
      _this.timer = setTimeout(_this.callback, timeout);
    });

    _defineProperty(_assertThisInitialized(_this), "stop", function () {
      clearTimeout(_this.timer);
      _this.timer = null;
    });

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      return false;
    });

    return _this;
  }

  _createClass(ReactInterval, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var enabled = this.props.enabled;

      if (enabled) {
        this.start();
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(_ref) {
      var timeout = _ref.timeout,
          callback = _ref.callback,
          enabled = _ref.enabled;
      var _this$props = this.props,
          timeout1 = _this$props.timeout,
          callback1 = _this$props.callback,
          enabled1 = _this$props.enabled;
      return timeout1 !== timeout || callback1 !== callback || enabled1 !== enabled;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref2) {
      var enabled = _ref2.enabled,
          timeout = _ref2.timeout;
      var _this$props2 = this.props,
          timeout1 = _this$props2.timeout,
          enabled1 = _this$props2.enabled;

      if (enabled1 !== enabled || timeout1 !== timeout) {
        if (enabled1) {
          this.start();
        } else {
          this.stop();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stop();
    }
  }]);

  return ReactInterval;
}(_react["default"].Component);

exports.ReactInterval = ReactInterval;

_defineProperty(ReactInterval, "defaultProps", {
  enabled: false,
  timeout: 1000
});