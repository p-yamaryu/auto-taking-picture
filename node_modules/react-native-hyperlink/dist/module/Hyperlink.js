function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { View, Text, Linking, Platform } from 'react-native';
import mdurl from 'mdurl';

const linkify = require('linkify-it')();

const {
  OS
} = Platform;

class Hyperlink extends Component {
  static getDerivedStateFromProps(nextProps, prevState) {
    return nextProps.linkify !== prevState.linkifyIt ? {
      linkifyIt: nextProps.linkify || linkify
    } : null;
  }

  constructor(props) {
    super(props);

    _defineProperty(this, "linkify", component => {
      if (!this.state.linkifyIt.pretest(component.props.children) || !this.state.linkifyIt.test(component.props.children)) return component;
      let elements = [];
      let _lastIndex = 0;
      const componentProps = { ...component.props,
        ref: undefined,
        key: undefined
      };

      try {
        var _this$state$linkifyIt;

        (_this$state$linkifyIt = this.state.linkifyIt.match(component.props.children)) === null || _this$state$linkifyIt === void 0 ? void 0 : _this$state$linkifyIt.forEach(_ref => {
          var _this$props$injectVie, _this$props3;

          let {
            index,
            lastIndex,
            text,
            url
          } = _ref;
          let nonLinkedText = component.props.children.substring(_lastIndex, index);
          nonLinkedText && elements.push(nonLinkedText);
          _lastIndex = lastIndex;
          if (this.props.linkText) text = typeof this.props.linkText === 'function' ? this.props.linkText(url) : this.props.linkText;
          const clickHandlerProps = {};

          if (OS !== 'web') {
            clickHandlerProps.onLongPress = this.props.onLongPress ? () => {
              var _this$props$onLongPre, _this$props;

              return (_this$props$onLongPre = (_this$props = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props, url, text);
            } : undefined;
          }

          clickHandlerProps.onPress = this.props.onPress ? () => {
            var _this$props$onPress, _this$props2;

            return (_this$props$onPress = (_this$props2 = this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props2, url, text);
          } : undefined;
          elements.push( /*#__PURE__*/React.createElement(Text, _extends({}, componentProps, clickHandlerProps, {
            key: url + index,
            style: [component.props.style, this.props.linkStyle]
          }, (_this$props$injectVie = (_this$props3 = this.props).injectViewProps) === null || _this$props$injectVie === void 0 ? void 0 : _this$props$injectVie.call(_this$props3, url)), text));
        });
        elements.push(component.props.children.substring(_lastIndex, component.props.children.length));
        return /*#__PURE__*/React.cloneElement(component, componentProps, elements);
      } catch (err) {
        return component;
      }
    });

    _defineProperty(this, "parse", component => {
      let {
        props: {
          children
        } = {
          children: undefined
        }
      } = component || {};
      if (!children) return component;
      const componentProps = { ...component.props,
        ref: undefined,
        key: undefined
      };
      return /*#__PURE__*/React.cloneElement(component, componentProps, React.Children.map(children, child => {
        let {
          type: {
            displayName
          } = {
            displayName: undefined
          }
        } = child || {};
        if (typeof child === 'string' && this.state.linkifyIt.pretest(child)) return this.linkify( /*#__PURE__*/React.createElement(Text, _extends({}, componentProps, {
          style: component.props.style
        }), child));
        if (displayName === 'Text' && !this.isTextNested(child)) return this.linkify(child);
        return this.parse(child);
      }));
    });

    this.state = {
      linkifyIt: props.linkify || linkify
    };
  }

  render() {
    const {
      onPress,
      linkDefault,
      onLongPress,
      linkStyle,
      linkify,
      linkText,
      ...viewProps
    } = this.props;
    return /*#__PURE__*/React.createElement(View, _extends({}, viewProps, {
      style: this.props.style
    }), !this.props.onPress && !this.props.onLongPress && !this.props.linkStyle ? this.props.children : //@ts-ignore
    this.parse(this).props.children);
  }

  isTextNested(component) {
    if (! /*#__PURE__*/React.isValidElement(component)) throw new Error('Invalid component');
    let {
      type: {
        displayName
      } = {}
    } = component;
    if (displayName !== 'Text') throw new Error('Not a Text component');
    return typeof component.props.children !== 'string';
  }

}

_defineProperty(Hyperlink, "defaultProps", {
  linkify,
  injectViewProps: _ => ({})
});

export default class extends Component {
  constructor(props) {
    super(props);
    this.handleLink = this.handleLink.bind(this);
  }

  handleLink(url) {
    const urlObject = mdurl.parse(url);
    urlObject.protocol = urlObject.protocol.toLowerCase();
    const normalizedURL = mdurl.format(urlObject);
    Linking.canOpenURL(normalizedURL).then(supported => supported && Linking.openURL(normalizedURL));
  }

  render() {
    const onPress = this.handleLink || this.props.onPress;
    return this.props.linkDefault ? /*#__PURE__*/React.createElement(Hyperlink, _extends({}, this.props, {
      onPress: onPress
    })) : /*#__PURE__*/React.createElement(Hyperlink, this.props);
  }

}
//# sourceMappingURL=Hyperlink.js.map